const path = require('path');
const childProcess = require('child_process');
const throat = require('throat');
const utils = require('./utils');

const exec = (...args) => new Promise((resolve, reject) => {
    // eslint-disable-next-line
    childProcess.exec.apply(this, [
        ...args,
        (err, stdout) => err && reject(err) || resolve(stdout),
    ]);
});

/**
 * This script generates the supported devices page.
 */

let devices = [...require('zigbee-herdsman-converters').devices];
const vendors = new Set();

module.exports = async function() {
    for (const device of devices) {
        if (device.whiteLabel) {
            for (const whiteLabel of device.whiteLabel) {
                const whiteLabelDevice = {
                    ...device,
                    model: whiteLabel.model,
                    vendor: whiteLabel.vendor,
                    description: whiteLabel.description,
                    isWhiteLabel: true,
                    whiteLabelOf: device,
                };

                delete whiteLabelDevice.whiteLabel;

                devices.push(whiteLabelDevice);
            }
        }
    }

    devices = devices.map((d) => {
        const model = d.model;
        const image = utils.getImage(d, '');
        const description = d.description || d.whiteLabelOf.description;
        const link = `../devices/${ utils.normalizeModel(d.whiteLabelOf ? d.whiteLabelOf.model : d.model) }.html`;
        const exposes = Array.from(new Set(
            d.exposes
                .map((e) => e.name ? e.name : e.type)
                .filter((e) => e !== 'linkquality' && e !== 'effect'),
        ));

        vendors.add(d.vendor);

        return {
            model,
            vendor: d.vendor,
            description,
            image,
            link,
            exposes,
            isWhiteLabel: d.isWhiteLabel || d.whiteLabel,
        };
    });

    const addAddedAt = async (device) => {
        const file = path.resolve(__dirname, '../docs/devices', `${ utils.normalizeModel(device.model) }.md`);
        device.addedAt = (await exec(`git log --date=iso8601-strict --format=%ad --diff-filter=A -- ${ file }`)).trim();
    };

    // exec git log - 50 in parallel
    await Promise.all(devices.map(throat(20, addAddedAt)));

    devices.sort((a, b) => (b.addedAt < a.addedAt) ? -1 : ((b.addedAt > a.addedAt) ? 1 : 0));

    return `---
---
<!---
This file has been generated, do not edit this file manually!
-->
# Supported devices

Currently **${ devices.length }** devices are supported from **${ vendors.size }** different vendors.

In case you own a Zigbee device which is **NOT** listed here, please see
[How to support new devices](../how_tos/how_to_support_new_devices.md).

<div id="supported-devices-app"></div>

<script>
window.ZIGBEE2MQTT_SUPPORTED_DEVICES = ${ JSON.stringify(devices) };
</script>
<script defer="defer" src="../assets/device-overview/js/chunk-vendors.js" type="module"></script>
<script defer="defer" src="../assets/device-overview/js/app.js" type="module"></script>
<link href="../assets/device-overview/css/app.css" rel="stylesheet">
<script defer="defer" src="../assets/device-overview/js/chunk-vendors-legacy.js" nomodule=""></script>
<script defer="defer" src="../assets/device-overview/js/app-legacy.js" nomodule=""></script>
`;
};
